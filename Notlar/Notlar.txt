<-- 2. Gün -->
Ternary operatörü; if - else gibi þartlý yapýlarýn tek satýr kod bloðuna indirgenmiþ, daha sade ve kýsa yazýlmýþ kod versiyonudur.

int number = -5;
string result = (number > 0) ? "Pozitif" : "Negatif";
Console.WriteLine(result); // Bu, "Negatif" yazdýracaktýr.

<-- 3.Gün -->
C# programlama dilinde "ref" ve "out" anahtar kelimeleri, metodlara parametre olarak deðerlerin nasýl iletilip döndürüleceðini belirlemek için kullanýlýr.

ref Anahtar Kelimesi:

"ref" anahtar kelimesi, bir metoda deðeri referans olarak geçirmek için kullanýlýr. Yani, ref anahtar kelimesi ile belirtilen bir deðiþken, metoda bir referans aracýlýðýyla geçirilir ve metot bu referansý kullanarak deðiþkenin deðerini doðrudan deðiþtirebilir. Bu, deðeri deðiþtirilen deðiþkenin metot dýþýnda da deðiþmiþ olmasýný saðlar.

    void MultiplyByTwo(ref int number)
    {
        number *= 2;
    }

int num = 5;
MultiplyByTwo(ref num);
// num þimdi 10 deðerine sahiptir.

out Anahtar Kelimesi:

"out" anahtar kelimesi de "ref" anahtar kelimesine benzer þekilde çalýþýr, ancak "out" anahtar kelimesi ile belirtilen parametre, metot içinde ilk deðeri atanmadan kullanýlabilir. Metot içinde "out" parametresine bir deðer atanmalýdýr, aksi halde derleme hatasý alýrsýnýz.

    void Divide(int dividend, int divisor, out int quotient, out int remainder)
    {
        quotient = dividend / divisor;
        remainder = dividend % divisor;
    }

int resultQuotient;
int resultRemainder;
Divide(10, 3, out resultQuotient, out resultRemainder);
// resultQuotient þimdi 3 deðerine, resultRemainder 1 deðerine sahiptir.
Bu anahtar kelimeler, metotlar arasýnda deðerlerin nasýl iletilip alýnacaðýný belirlemek için kullanýlýr ve deðerleri metot dýþýnda deðiþtirmek için kullanýlýrlar.

<-- 4.Gün -->
Stack bellek genellikle yerel deðiþkenler ve fonksiyon çaðrýlarý için kullanýlýr ve hýzlý, sýnýrlý bir bellek alanýna sahiptir. 
Heap bellek ise dinamik bellek tahsisleri ve referans türleri için kullanýlýr.

Dictionary: System.Collections.Generic adýnda bir namespace içinde bulunur. Key-Value çiftlerini depolamak için kullanýlan bir koleksiyon türüdür. temel iþlevleri arasýnda olanlar ise: 
- key-value ekleme ve deðiþtirme
- key-value silme
- Liste içinde belirli bir key veya value  arama)
- key veya value ayrý ayrý listeleme. 

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        // Dictionary oluþturma
        Dictionary<string, int> sozluk = new Dictionary<string, int>();

        // Anahtar-deðer çifti ekleme
        sozluk["Anahtar1"] = 1;
        sozluk["Anahtar2"] = 2;
        sozluk["Anahtar3"] = 3;

        // Anahtar ile deðeri alýp yazdýrma
        Console.WriteLine("Anahtar1: " + sozluk["Anahtar1"]);

        // Dictionary içinde dolaþma
        foreach (var anahtar in sozluk.Keys)
        {
            Console.WriteLine(anahtar + ": " + sozluk[anahtar]);
        }

        // Belirli bir anahtarý kontrol etme
        if (sozluk.ContainsKey("Anahtar2"))
        {
            Console.WriteLine("Anahtar2 bulundu: " + sozluk["Anahtar2"]);
        }

        // Anahtar-deðer çiftini silme
        sozluk.Remove("Anahtar3");

        // Dictionary içindeki eleman sayýsý
        Console.WriteLine("Eleman Sayýsý: " + sozluk.Count);
    }
}

<-- 5.Gün -->
Abstract sýnýflar, nesne yönelimli programlamada (OOP) kullanýlan bir kavramdýr. Bir programlama dilinde abstract sýnýflar, diðer sýnýflarýn temelini oluþturan ancak doðrudan örneklenemeyen (instance oluþturulamayan) sýnýflardýr. Abstract sýnýflar, genellikle soyut metodlarý içerir; yani, metodlarýn imzalarýný (isim ve parametreler) tanýmlar, ancak metodlarýn tam gövdelerini içermez.

Abstract sýnýflarýn temel amaçlarý þunlardýr:

Kalýtým (Inheritance): Abstract sýnýflar, diðer sýnýflar tarafýndan miras alýnabilir. Bu, alt sýnýflarýn abstract sýnýfýn özelliklerini ve metodlarýný devralabileceði anlamýna gelir. Bu þekilde, ortak özellikleri ve davranýþlarý olan nesneler için bir temel oluþturabiliriz.

Soyut Metodlar (Abstract Methods): Abstract sýnýflar soyut metodlar içerebilir. Soyut metodlar, sadece imzalarýný tanýmlar, yani metodun adýný, parametrelerini ve dönüþ deðerini belirtir, ancak metodun gerçek uygulamasýný içermez. Bu metodlar, abstract sýnýfý miras alan alt sýnýflar tarafýndan gerçek uygulamalarla doldurulmalýdýr.

using System;

// Abstract sýnýf tanýmlama
abstract class Sekil
{
    // Soyut metod tanýmlama
    public abstract double AlanHesapla();
}

// Sekil sýnýfýndan türeyen Dikdortgen sýnýfý
class Dikdortgen : Sekil
{
    // AlanHesapla metodunu uygulama (implement)
    public override double AlanHesapla()
    {
        Console.WriteLine("Dikdörtgenin Alaný Hesaplanýyor...");
        // Dikdörtgenin alaný uzunluk ile geniþlik çarpýmýna eþittir
        return Uzunluk * Genislik;
    }

    // Dikdörtgenin uzunluk ve geniþlik özellikleri
    public double Uzunluk { get; set; }
    public double Genislik { get; set; }
}

class Program
{
    static void Main(string[] args)
    {
        // Dikdörtgen sýnýfýndan bir nesne oluþturulamaz çünkü Sekil abstract sýnýf olduðu için doðrudan örneklenemez
        // Ancak Dikdortgen sýnýfý, Sekil sýnýfýndan türediði için onu miras alabilir ve soyut metodlarý implement edebilir
        Dikdortgen dikdortgen = new Dikdortgen();
        dikdortgen.Uzunluk = 5;
        dikdortgen.Genislik = 3;

        // AlanHesapla metodunu çaðýrma
        double alan = dikdortgen.AlanHesapla();
        Console.WriteLine("Dikdörtgenin Alaný: " + alan);

        Console.ReadLine();
    }
}
Bu örnekte, Sekil adýnda bir abstract sýnýf tanýmlanmýþtýr. Bu sýnýf, soyut bir AlanHesapla metodunu içerir. Dikdortgen sýnýfý, Sekil sýnýfýndan türetilir ve AlanHesapla metodunu uygular. Abstract sýnýflar, türetilen sýnýflarýn ortak özelliklerini ve davranýþlarýný belirlemek için kullanýlýr.

<-- 6.Gün -->

SELECT 
    Products.ProductName,
    SUM(OrderDetails.UnitPrice * OrderDetails.Quantity) AS KazanilanToplamMiktar
FROM 
    Products
JOIN 
    OrderDetails ON Products.ProductID = OrderDetails.ProductID
JOIN 
    Orders ON OrderDetails.OrderID = Orders.OrderID
GROUP BY 
    Products.ProductName;
Bu SQL sorgusu, "Products", "OrderDetails" ve "Orders" tablolarýný birleþtirir. Ürün adýný (ProductName) ve bir üründen elde edilen toplam kazancý hesaplar. "OrderDetails" tablosundaki "UnitPrice" ve "Quantity" alanlarýný çarparak ürün baþýna elde edilen kazancý hesaplar ve sonuçlarý ürün adýna göre gruplar. Gruplandýrýlmýþ toplam kazancý hesaplamak için "SUM" fonksiyonu kullanýlýr.